Insertion:
def insert(self, data):
  root = self.insert_util(self.root, data)
  return root

def insert_util(self, node, data):
  if node is None:
    return Node(data)

  if data < node.data:
    node.left = self.insert_util(node.left, data)
  elif data > node.data:
    node.right = self.insert_util(node.right, data)
  else:
    # Duplicate data (not allowed in BST)
    return node

  # Update height
  node.height = 1 + max(self.get_height(node.left), self.get_height(node.right))

  # Get balance factor
  balance = self.get_balance(node)

  # Perform rotations if unbalanced
  if balance > 1 and data < node.left.data:
    return self.right_rotate(node)
  elif balance < -1 and data > node.right.data:
    return self.left_rotate(node)
  elif balance > 1 and data > node.left.data:
    node.left = self.left_rotate(node.left)
    return self.right_rotate(node)
  elif balance < -1 and data < node.right.data:
    node.right = self.right_rotate(node.right)
    return self.left_rotate(node)

  return node
